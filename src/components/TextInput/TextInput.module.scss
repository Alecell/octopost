@use '../../styles/global';
@use '~styles/breakpoints.scss' as *;

@mixin apply-color($color) {
  &.containerFocus {
    color: $color;
  }

  .inputWrapper {
    .label {
      &.labelAnimate {
        color: $color;
      }
    }
  }
}

.container {
  margin-top: -1rem;

  &.containerError {
    color: global.$secondaryRed;
  }

  &.containerFocus {
    color: global.$secondaryPurple;
  }

  .innerContainer {
    display: flex;
    flex-direction: row;

    margin-top: -0.75rem;
    padding: 1rem;
    border: 1px solid global.$secondaryGray;

    border-radius: 4px;

    &.innerContainerFocus {
      border-color: global.$secondaryPurple;
    }

    &.innerContainerError {
      border-color: global.$secondaryRed;
    }

    .input {
      width: 100%;

      font-size: 1rem;
      font-weight: 400;

      border: 0;
      letter-spacing: 0.03rem;

      &.inputFocus {
        caret-color: global.$secondaryPurple;
      }

      &.inputError {
        caret-color: global.$secondaryRed;
      }

      &:focus {
        outline: none;
      }
    }
  }

  .label {
    font-size: 0.75rem;
    font-weight: 400;
    line-height: 0;

    margin-left: 1rem + 0.25rem; //sums inner container padding + outer container

    padding: 0 0.25rem;

    background-color: global.$primaryWhite;
  }

  .rightIcon {
    width: 1.5rem;

    display: flex;

    align-items: center;

    &:hover {
      cursor: pointer;
    }

    &.rightIconError {
      color: global.$secondaryRed;
    }
  }

  .supportText {
    height: 1.5rem;

    color: global.$secondaryGray;
    font-size: 0.75rem;
    font-weight: 400;

    padding: 0.25rem 1rem;

    visibility: hidden;

    &.supportTextExists {
      visibility: visible;
    }

    &.supportTextError {
      color: global.$secondaryRed;
    }
  }
}
